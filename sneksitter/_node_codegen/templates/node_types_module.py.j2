"""This file is generated from tree-sitter grammar files.

Do not edit this file directly; it may be overwritten.
"""
from __future__ import annotations
from dataclasses import dataclass, field, fields
from typing import (
    Optional as T_Optional,
    Union as T_Union,
    Tuple as T_Tuple,
    ClassVar as T_ClassVar,
    List as T_List,
    Dict as T_Dict,
    Type as T_Type,
)
from tree_sitter import Node as TS_Node, Tree as TS_Tree
from sneksitter._node_codegen.base_generic_node import BaseGenericNode

{# Insert the base node class #}
{% include 'base_node_template.py.j2' %}

{# Insert all supertype node classes #}
{% for node in supertype_nodes %}
{% include 'syntax_node_template.py.j2'  %}
{% endfor %}
{# Insert all syntax node classes #}
{% for node in syntax_nodes %}
{% include 'syntax_node_template.py.j2' %}
{% endfor %}

NODE_MAPPING: T_Dict[T_Tuple[str, bool], T_Type[{{ base_node_cls_name }}]] = {
    {% for node in supertype_nodes %}
    ({{ node.original_type|string_literal }}, {{ node.named }}): {{ node.type }},
    {% endfor %}
    {% for node in syntax_nodes %}
    ({{ node.original_type|string_literal }}, {{ node.named }}): {{ node.type }},
    {% endfor %}
}

