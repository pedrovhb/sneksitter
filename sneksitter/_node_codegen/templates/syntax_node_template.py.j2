
class {{ node.type }}({{ node.bases|join(", ") }}):
    _key: T_ClassVar[tuple[str, bool]] = ("{{ node.original_type }}", {{ node.named }})

{% for field in node.fields %}
    {% if field.type %}
    {{ field.name }}: {{ field.type }}
    {% endif %}
{% endfor %}

    {% if node.fields %}
    def __init__(self,
         original_node: TS_Node,
{% for field in node.fields %}
    {% if field.type and field.default %}
        {{ field.name }}: {{ field.type }} = {{ field.default }},
    {% elif field.type %}
        {{ field.name }}: {{ field.type }},
    {% elif field.default %}
        {{ field.name }} = {{ field.default }},
    {% else %}
        {{ field.name }},
    {% endif %}
{% endfor %}
    ) -> None:
        super().__init__(original_node)
        {% for field in node.fields %}
        self.{{ field.name }} = {{ field.name }}
        {% endfor %}

        self.all_nodes = [
        {% for field in node.fields %}
        {% if field.name == "named_children" %}
            *self.{{ field.name }},
        {% else %}
            self.{{ field.name }},
        {% endif %}
        {% endfor %}
        ]
        self.all_nodes = [node for node in self.all_nodes if node is not None]

    {% endif %}

    {% if field_aliases %}
    FIELD_ALIASES: T_ClassVar[dict[str, str]] = {
    {% for alias, field in field_aliases %}
        "{{ alias }}": "{{ field }}",
    {% endfor %}
    }
    {% else %}
    FIELD_ALIASES: T_ClassVar[dict[str, str]] = {}
    {% endif %}

